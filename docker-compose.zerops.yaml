# Docker Compose configuration for Zerops deployment
# This extends the main compose.yaml with Zerops-specific requirements

x-customizable-image: &customizable_image
  # Use ERPNext image with custom apps from our Containerfile
  image: ${CUSTOM_IMAGE:-frappe/erpnext}:${CUSTOM_TAG:-v15.84.0}
  pull_policy: always
  restart: unless-stopped
  # IMPORTANT: All services must use network_mode: host for Zerops
  network_mode: host

x-depends-on-configurator: &depends_on_configurator
  depends_on:
    configurator:
      condition: service_completed_successfully

x-backend-defaults: &backend_defaults
  <<: [*depends_on_configurator, *customizable_image]
  volumes:
    - /mnt/sharedstorage/sites:/home/frappe/frappe-bench/sites
  environment:
    - DB_HOST
    - DB_PORT
    - DB_PASSWORD
    - ADMIN_PASSWORD
    - REDIS_CACHE
    - REDIS_QUEUE
    - SOCKETIO_PORT
    - FRAPPE_SITE_NAME_HEADER

services:
  configurator:
    <<: *backend_defaults
    platform: linux/amd64
    entrypoint:
      - bash
      - -c
    # Basic Frappe configuration only (site installation handled by backend)
    command:
      - |
        echo "‚öôÔ∏è Starting Frappe configuration..."
        echo "===================================="
        
        # Create or update apps.txt with apps available in this container
        echo "üìù Creating apps.txt from available apps..."
        ls -1 apps > /home/frappe/frappe-bench/sites/apps.txt
        echo "‚úÖ Created apps.txt with:"
        cat /home/frappe/frappe-bench/sites/apps.txt
        
        # Configure Frappe settings
        echo "‚öôÔ∏è Configuring Frappe settings..."
        bench set-config -g db_host $$DB_HOST
        bench set-config -gp db_port $$DB_PORT
        bench set-config -g redis_cache $$REDIS_CACHE
        bench set-config -g redis_queue $$REDIS_QUEUE
        bench set-config -g redis_socketio $$REDIS_QUEUE
        bench set-config -gp socketio_port $$SOCKETIO_PORT
        
        echo "‚úÖ Frappe configuration completed"
    environment:
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT:-3306}
      DB_PASSWORD: ${DB_PASSWORD}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}
      REDIS_CACHE: ${REDIS_CACHE}
      REDIS_QUEUE: ${REDIS_QUEUE}
      SOCKETIO_PORT: 9000
      FRAPPE_SITE_NAME_HEADER: ${FRAPPE_SITE_NAME_HEADER}
    depends_on: {}
    restart: on-failure

  backend:
    <<: *backend_defaults
    platform: linux/amd64
    entrypoint:
      - bash
      - -c
    # Handle site installation before starting the backend server
    command:
      - |
        echo "üèóÔ∏è Starting backend with site installation check..."
        echo "=================================================="
        
        # Navigate to bench directory
        cd /home/frappe/frappe-bench
        
        # Check if site already exists to avoid reinstallation
        echo "üîç Checking for existing site installation..."
        if [ -d "sites/$$FRAPPE_SITE_NAME_HEADER" ] && bench --site all list-sites 2>/dev/null | grep -q "$$FRAPPE_SITE_NAME_HEADER"; then
            echo "‚ôªÔ∏è Site '$$FRAPPE_SITE_NAME_HEADER' already exists - running migration..."
            bench --site "$$FRAPPE_SITE_NAME_HEADER" migrate
            echo "‚úÖ Migration completed"
        else
            echo "üÜï Creating new site: $$FRAPPE_SITE_NAME_HEADER"
            
            # Create new site
            bench new-site "$$FRAPPE_SITE_NAME_HEADER" \
              --mariadb-root-password "$$DB_PASSWORD" \
              --admin-password "$$ADMIN_PASSWORD" \
              --no-mariadb-socket
              
            # Install ERPNext app
            echo "üì¶ Installing ERPNext app..."
            bench --site "$$FRAPPE_SITE_NAME_HEADER" install-app erpnext
            
            # Install XML Importer app if available
            if ls -1 apps | grep -q "erpnext_xml_importer"; then
              echo "üì¶ Installing XML Importer app..."
              bench --site "$$FRAPPE_SITE_NAME_HEADER" install-app erpnext_xml_importer
            fi
            
            echo "‚úÖ Site installation completed"
        fi
        
        echo "üöÄ Starting Frappe backend server..."
        # Start the normal backend server
        exec /home/frappe/frappe-bench/env/bin/gunicorn \
          --chdir=/home/frappe/frappe-bench/sites \
          --bind=0.0.0.0:8000 \
          --threads=4 \
          --workers=2 \
          --worker-class=gthread \
          --worker-tmp-dir=/dev/shm \
          --timeout=120 \
          --preload \
          frappe.app:application

  frontend:
    <<: *customizable_image
    platform: linux/amd64
    command:
      - nginx-entrypoint.sh
    environment:
      - BACKEND=127.0.0.1:8000
      - SOCKETIO=127.0.0.1:9000
      - FRAPPE_SITE_NAME_HEADER
      - UPSTREAM_REAL_IP_ADDRESS=127.0.0.1
      - UPSTREAM_REAL_IP_HEADER=X-Forwarded-For
      - UPSTREAM_REAL_IP_RECURSIVE=off
      - PROXY_READ_TIMEOUT=120
      - CLIENT_MAX_BODY_SIZE=50m
    volumes:
      - /mnt/sharedstorage/sites:/home/frappe/frappe-bench/sites
    depends_on:
      - backend
      - websocket

  websocket:
    <<: [*depends_on_configurator, *customizable_image]
    platform: linux/amd64
    command:
      - node
      - /home/frappe/frappe-bench/apps/frappe/socketio.js
    volumes:
      - /mnt/sharedstorage/sites:/home/frappe/frappe-bench/sites

  queue-short:
    <<: *backend_defaults
    platform: linux/amd64
    command: bench worker --queue short,default

  queue-long:
    <<: *backend_defaults
    platform: linux/amd64
    command: bench worker --queue long,default,short

  scheduler:
    <<: *backend_defaults
    platform: linux/amd64
    command: bench schedule