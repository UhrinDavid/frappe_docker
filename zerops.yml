# Zerops configuration for Frappe/ERPNext deployment
# Creates managed database services and uses Docker Compose for application containers

# Managed Services have to be executed in Zerops GUI using 'Import services'
services:
    - hostname: mariadb
      # service type and version number in mariadb@{version} format
      type: mariadb@10.6
      # mode of operation "HA"/"NON_HA",
      mode: NON_HA

    - hostname: rediscache
      type: valkey@7.2
      mode: NON_HA  # use HA in production
    
    - hostname: redisqueue
      type: valkey@7.2
      mode: NON_HA  # use HA in production

zerops:
  # Frappe/ERPNext Application Services (Docker Compose)
  - setup: erpnext
    build:
      # Build custom ERPNext image with XML Importer
      base: alpine@3.19
      buildCommands:
        # Install Docker and Docker Compose with sudo
        - sudo apk update
        - sudo apk add --no-cache docker docker-compose
        - sudo rc-update add docker boot
        # Add current user to docker group for socket access
        - sudo addgroup $(whoami) docker
        - sudo service docker start || sudo dockerd &
        # Wait for Docker daemon to be ready
        - sleep 5
        # Fix docker socket permissions
        - sudo chmod 666 /var/run/docker.sock
        # Build and push to Docker Hub using Git commit SHA
        - |
          export GIT_SHA=$(git rev-parse --short HEAD)
          echo "Building with Git SHA: $GIT_SHA"
          docker build -f images/herbatica/erpnext/Containerfile -t davidu98/herbatica-erpnext:$GIT_SHA .
          docker tag davidu98/herbatica-erpnext:$GIT_SHA davidu98/herbatica-erpnext:latest
          echo $DOCKERHUB_TOKEN | docker login -u davidu98 --password-stdin
          docker push davidu98/herbatica-erpnext:$GIT_SHA
          docker push davidu98/herbatica-erpnext:latest
      deployFiles: 
        - ./docker-compose.zerops.yaml
        - ./scripts/
      addToRunPrepare: 
        - ./docker-compose.zerops.yaml
        - ./scripts/
    run:
      # Environment variables for Docker Compose services
      envVariables:
        # Image configuration  
        CUSTOM_IMAGE: davidu98/herbatica-erpnext
        CUSTOM_TAG: latest
        
        # Docker Hub authentication
        DOCKERHUB_TOKEN: ${DOCKERHUB_TOKEN}
        ERPNEXT_VERSION: v15.84.0
        PULL_POLICY: always
        RESTART_POLICY: unless-stopped
        
        # Database connection (using Zerops service)
        DB_HOST: ${mariadb_hostname}
        DB_PORT: 3306
        DB_ROOT_USERNAME: ${mariadb_user}
        DB_PASSWORD: ${mariadb_password}

        # Redis connection (using Zerops services) 
        REDIS_CACHE: redis://rediscache:6379
        REDIS_QUEUE: redis://redisqueue:6379

        # Site configuration
        FRAPPE_SITE_NAME_HEADER: ${siteName}
        ADMIN_PASSWORD: ${adminPassword}

        # Nginx/Proxy settings
        UPSTREAM_REAL_IP_ADDRESS: 127.0.0.1
        UPSTREAM_REAL_IP_HEADER: X-Forwarded-For
        UPSTREAM_REAL_IP_RECURSIVE: "off"
        PROXY_READ_TIMEOUT: 120
        CLIENT_MAX_BODY_SIZE: 50m
      
      # Basic preparation
      prepareCommands:
        # Pull the custom Docker image
        - docker pull davidu98/herbatica-erpnext:latest
        # Make installation script executable and run it
        # - chmod +x scripts/install-frappe.sh
        # - ./scripts/install-frappe.sh

      # Expose HTTP port
      ports:
        - port: 8080
          httpSupport: true

      # Start the application stack 
      start: docker compose -f docker-compose.zerops.yaml up --force-recreate

# Installation Process (Inline Commands):
# Prepare Phase:
# - Pull custom Docker image with XML Importer
# - Set up shared storage directory structure
#
# Start Phase:
# 1. Start Docker Compose services
# 2. Validate service connections (MariaDB, Redis)
# 3. Install Frappe site with ERPNext and custom apps (idempotent)
# 4. Verify installation and list installed apps
# 5. Keep containers running
#
# Benefits of managed services:
# - Automatic backups and point-in-time recovery
# - Built-in monitoring and alerting
# - Automatic security updates
# - High availability and failover
# - Performance optimization
# - No container overhead for databases